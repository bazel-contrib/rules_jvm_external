buildscript {
    dependencies {
        classpath(files("{{pluginJarPath}}"))
    }
}

val pluginClass = Class
    .forName("com.github.bazelbuild.rules_jvm_external.resolver.gradle.plugin.GradleDependencyModelPlugin")
val plugin = pluginClass.getDeclaredConstructor().newInstance() as Plugin<Project>
plugins.apply(plugin)

plugins {
   java
}

repositories {
{{~#each repositories}}
    maven {
        url = uri("{{url}}")
        {{~#if requiresAuth}}
        credentials {
            username = project.findProperty("{{usernameProperty}}") as String?
                ?: throw GradleException("Missing {{usernameProperty}}")
            password = project.findProperty("{{passwordProperty}}") as String?
                ?: throw GradleException("Missing {{passwordProperty}}")
        }
        {{/if~}}
    }
{{/each~}}
}

// Support dependencies, BOMs and otherwise
dependencies {
{{~#each boms}}
    implementation(platform("{{group}}:{{artifact}}:{{version}}"))
{{/each~}}
{{~#each dependencies}}
    {{lowerCase scope}}("{{group}}:{{artifact}}:{{version}}"){{#if exclusions}} { {{~#each exclusions}} exclude(group = "{{group}}", module = "{{module}}") {{/each~}} }{{/if}}
{{/each~}}
}

{{#if globalExclusions}}
configurations.all {
{{~#each globalExclusions}}
    exclude(group = "{{group}}", module="{{module}}")
{{/each~}}
}
{{/if}}